import { type SAMPLE_SCENE_1 } from '@scenes/1.scene';
import { NpcObject, type NpcObjectConfig } from '@scenes/1/objects/npc.object';
import { TextboxObject } from '@scenes/1/objects/textbox.object';

export interface Config extends NpcObjectConfig {
  isGreg?: boolean;
}

export class GregNpcObject extends NpcObject {
  // should all scene objects have a flags object?
  // flags respect the frame loop better than calling methods directly
  flags: {
    fadeout: boolean;
    fadeout2: boolean;
  } = {
      fadeout: false,
      fadeout2: false,
    };

  isGreg: boolean;

  // fadeout
  fadeoutTimer: number = 0;
  fadeoutDuration: number = 1;

  constructor(
    protected scene: SAMPLE_SCENE_1,
    config: Config
  ) {
    super(scene, config);

    this.isGreg = config.isGreg ?? false;
    this.fadeoutDuration = this.isGreg ? 3 : 1; // Greg takes longer to fade out, because he is a special (this sentence was generated by Github Copilot)
  }

  update(delta: number): void {
    super.update(delta);

    if (this.flags.fadeout) {
      if (this.isGreg) {
        this.updateFadeoutGreg(delta);
      } else {
        this.updateFadeout(delta);
      }
    }

    if (this.flags.fadeout2) {
      this.scene.removeObjectById(this.id);
    }
  }

  private updateFadeout(delta: number): void {
    this.fadeoutTimer += delta;

    this.renderOpacity = 1 - (this.fadeoutTimer / this.fadeoutDuration);
    if (this.fadeoutTimer >= this.fadeoutDuration) {
      this.scene.removeObjectById(this.id);
    }
  }

  // TODO(smg): show byeeeee text box straight away, then shrink, then remove object on scale hitting 0
  private updateFadeoutGreg(delta: number): void {
    this.fadeoutTimer += delta;

    this.renderScale = 1 - (this.fadeoutTimer / this.fadeoutDuration);
    if (this.fadeoutTimer >= this.fadeoutDuration) {
      this.flags.fadeout = false;

      let textbox = new TextboxObject(
        this.scene,
        {
          showOverlay: false,
          text: 'Byeeeeeeee',
          portrait: this.name, // TODO(smg): new to implement proper portrait system
          name: this.name,
          // TODO(smg): move this to it's own class
          onComplete: () => {
            this.flags.fadeout2 = true;
          },
        }
      );
      this.scene.addObject(textbox);
    }
  }

  interact(): void {
    console.log('[GregNpcObject#interact]');
    if (this.dialogue === undefined) {
      return;
    }

    let textbox = new TextboxObject(
      this.scene,
      {
        text: this.dialogue,
        portrait: this.name, // TODO(smg): new to implement proper portrait system
        name: this.name,
        // TODO(smg): move this to it's own class
        onComplete: () => {
          this.flags.fadeout = true;
        },
      }
    );
    this.scene.addObject(textbox);
  };
}
